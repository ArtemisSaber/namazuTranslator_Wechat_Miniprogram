"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatTime = (date) => {
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    const hour = date.getHours();
    const minute = date.getMinutes();
    const second = date.getSeconds();
    return ([year, month, day].map(formatNumber).join('/') +
        ' ' +
        [hour, minute, second].map(formatNumber).join(':'));
};
exports.initAuxilaryData = () => {
    let dataVersion = exports.getDataVersion();
    dataVersion.then((res) => {
        if (res) {
            let setLocalStor = exports.setLocalStorage('dataVersion', JSON.stringify(res));
            let setEmptyData = exports.getEmptyData();
            setLocalStor.then((res) => {
                console.log(res);
            }).catch((err) => {
                console.log(err);
            });
            setEmptyData.then((res) => {
                console.log(res);
            });
            wx.showToast({
                title: '数据版本已更新',
                icon: 'success',
                duration: 1500
            });
        }
    });
};
exports.getEmptyData = () => {
    return new Promise((resolve, reject) => {
        let blankItems = {
            "zh_cn": [''],
            "ja_jp": ['']
        };
        let blankItemPromise = exports.getJSONData(exports.getAPIPath('itemWithBlankSpace', 'zh-cn'));
        blankItemPromise.then((res) => {
            console.log(res);
            let resData = res.data;
            resData.zh_cn.forEach((e) => {
                blankItems.zh_cn.push(e.ItemName);
            });
            resData.ja_jp.forEach((e) => {
                blankItems.ja_jp.push(e.ItemName);
            });
            let storPromise = exports.setLocalStorage('blankItems', JSON.stringify(blankItems));
            storPromise.then(res => {
                resolve(res);
            }).catch(err => {
                reject(err);
            });
        }).catch(err => {
            reject(err);
        });
    });
};
exports.getDataVersion = () => {
    return new Promise((resolve, reject) => {
        let dataVersion = exports.getJSONData(exports.getAPIPath("dataVersion", "zh-cn"));
        dataVersion.then((res) => {
            console.log(res.data);
            resolve(res.data);
        }).catch(err => {
            console.log(err);
            reject(false);
        });
    });
};
exports.setLocalStorage = (key, data) => {
    return new Promise((resolve, reject) => {
        wx.setStorage({
            key: key,
            data: data,
            success(res) {
                console.log(res);
                resolve(true);
            },
            fail(err) {
                console.log(err);
                reject(false);
            }
        });
    });
};
exports.getLocalStorage = (key) => {
    return new Promise((resolve, reject) => {
        wx.getStorage({
            key: key,
            success(res) {
                console.log(res.data);
                resolve(res.data);
            },
            fail(err) {
                reject(err);
            }
        });
    });
};
exports.removeLocalStorage = (key) => {
    return new Promise((resolve, reject) => {
        wx.removeStorage({
            key: key,
            success(res) {
                console.log(res);
                resolve(true);
            },
            fail(err) {
                console.log(err);
                reject(false);
            }
        });
    });
};
exports.getAPIPath = (endPoint, sourceLang = 'zh-cn') => {
    let host = "https://dirusec.com/namazu/api/";
    switch (endPoint) {
        case ("item"):
            return host + "namazuTranslator/item?lang=" + sourceLang;
            break;
        case ("dataVersion"):
            return host + "namazuTranslator/dataVersion";
            break;
        case ("itemWithBlankSpace"):
            return host + "namazuTranslator/itemWithBlankSpace";
            break;
        default: {
            return host;
        }
    }
};
exports.parseResponseResult = (data) => {
    Object.keys(data).forEach(key => {
        if (data[key] === null) {
            data[key] = '未找到该物品';
        }
    });
    return data;
};
exports.parseEngUpper = (string) => {
    let wordArray = string.split(' ');
    for (let i = 0; i < wordArray.length; i++) {
        let word = wordArray[i];
        if (word !== 'of' && word.length > 0) {
            let charArray = word.split('');
            charArray[0] = charArray[0].toUpperCase();
            wordArray[i] = charArray.join('');
        }
    }
    return wordArray.join(' ');
};
exports.getJSONData = (url) => {
    return new Promise((resolve, reject) => {
        wx.request({
            url: url,
            method: 'GET',
            dataType: 'json',
            success(res) {
                resolve(res);
            },
            fail(err) {
                reject(err);
            }
        });
    });
};
exports.request = (url, method, dataType) => {
    return new Promise((resolve, reject) => {
        wx.request({
            url: url,
            method: method,
            dataType: dataType,
            success(res) {
                resolve(res);
            },
            fail(err) {
                reject(err);
            }
        });
    });
};
const formatNumber = (n) => {
    const s = n.toString();
    return s[1] ? s : '0' + s;
};
//# sourceMappingURL=data:application/json;base64,